from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_POST
import json
import yaml
from langchain_community.agent_toolkits.openapi import planner
from langchain_openai import ChatOpenAI
from langchain_community.utilities import TextRequestsWrapper
from langchain_community.agent_toolkits.openapi.spec import reduce_openapi_spec

ALLOW_DANGEROUS_REQUEST = True

# Load API specification
with open("dataapi.yaml") as f:
    raw_data_api_spec = yaml.load(f, Loader=yaml.Loader)
data_api_spec = reduce_openapi_spec(raw_data_api_spec)

data_requests_wrapper = TextRequestsWrapper()

llm = ChatOpenAI(
    model_name="gpt-4", 
    temperature=0
)

data_agent = planner.create_openapi_agent(
    data_api_spec, 
    data_requests_wrapper, 
    llm,
    allow_dangerous_requests=ALLOW_DANGEROUS_REQUEST,
)

@csrf_exempt
@require_POST
def data_response_api(request):
    """
    Handles POST requests to process a user query and return a response from an OpenAI agent.

    This view function reads the user query from the request body, invokes the OpenAI agent
    to process the query using a specified OpenAPI specification, and returns the response
    as a JSON object.

    Request Body:
    - query (str): The user query to be processed by the OpenAI agent.

    Responses:
    - 200 OK: 
        - response (str): The response generated by the OpenAI agent based on the user query.
    - 400 Bad Request:
        - error (str): 'No query provided' if the query is missing in the request body.
        - error (str): 'Invalid JSON' if the request body cannot be parsed as JSON.
    - 500 Internal Server Error:
        - error (str): Details of any exception that occurred during processing.

    Example Request:
    POST /core/api/query-response/
    Content-Type: application/json

    {
        "query": "What is the weather like today?"
    }

    Example Response:
    {
        "response": "The weather today is sunny with a high of 75Â°F."
    }
    """
    try:
        data = json.loads(request.body)
        user_query = data.get('query')
        if not user_query:
            return JsonResponse({'error': 'No query provided'}, status=400)

        response = data_agent.invoke(user_query)
        return JsonResponse({'response': response})
    except json.JSONDecodeError:
        return JsonResponse({'error': 'Invalid JSON'}, status=400)
    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500)

